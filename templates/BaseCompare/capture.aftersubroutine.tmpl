$prologue

LOGICAL FUNCTION ftg_${subroutine.name}_capture_active()

  ftg_${subroutine.name}_capture_active = &
    ftg_${subroutine.name}_round == ftg_${subroutine.name}_capture_round

END FUNCTION ftg_${subroutine.name}_capture_active

SUBROUTINE ftg_${subroutine.name}_init_serializer(stage)

    CHARACTER(*), PARAMETER :: DATA_DIR = '$dataDir/ftg_${subroutine.name}_test/'
    CHARACTER(*), INTENT(IN) :: stage
    CHARACTER(len=256) :: basename
    CHARACTER(len=1024) :: dir
    INTEGER(kind=4) rank, error

    CALL MPI_COMM_RANK(MPI_COMM_WORLD, rank, error)
    WRITE (basename,'(A,A,A,I0.2)') 'ftg_${subroutine.name}_', TRIM(stage), '_', rank
    WRITE (dir,'(A,A)') TRIM(DATA_DIR), TRIM(stage)
    
    CALL ftg_set_serializer(TRIM(dir), TRIM(basename), 'w')
    CALL ftg_set_savepoint(TRIM(stage))

  END SUBROUTINE ftg_${subroutine.name}_init_serializer

  SUBROUTINE ftg_${subroutine.name}_close_serializer()

   CALL ftg_destroy_savepoint()
   CALL ftg_destroy_serializer()

  END SUBROUTINE ftg_${subroutine.name}_close_serializer

SUBROUTINE ftg_${subroutine.name}_capture_input($commaList($args))

  $globals.imports
  $types.imports

  $args.specs(intent = 'in')

  INTEGER :: ftg_d1, ftg_d2, ftg_d3, ftg_d4
  CHARACTER(len=256) :: ftg_name

  CALL ftg_${subroutine.name}_init_serializer('input')

  ! REQUIRED ARGUMENTS
  #for $var in $args.requireds.usedVariables
    $ftgWrite($var)#end for

  ! OPTIONAL ARGUMENTS
  #for $arg in $args.optionals
    #if $arg.usedVariables
      IF (PRESENT($arg.name)) THEN
      #for $var in $arg.usedVariables
        $ftgWrite($var)#end for 
      END IF
    #end if 
  #end for

  ! GLOBALS
  #for $var in $globals.usedVariables
    $ftgWrite($var)#end for

  CALL ftg_${subroutine.name}_close_serializer()

END SUBROUTINE ftg_${subroutine.name}_capture_input

SUBROUTINE ftg_${subroutine.name}_capture_output($commaList($args.allOut, $result))

  $globals.imports
  $types.imports

  $args.allOut.specs(intent = 'in', allocatable = False)
  #if $subroutine.isFunction:
    $result.spec(intent = 'in', allocatable = False)
  #end if

  INTEGER :: ftg_d1, ftg_d2, ftg_d3, ftg_d4, error
  CHARACTER(len=256) :: ftg_name

  CALL ftg_${subroutine.name}_init_serializer('output')
  CALL ftg_set_savepoint('output')

  $resetRegistrations
  ! REQUIRED ARGUMENTS
  #for $var in $args.allOut.requireds.usedVariables
    $ftgWrite($var)#end for
    
  ! OPTIONAL ARGUMENTS
  #for $arg in $args.allOut.optionals
    #if $arg.usedVariables
      IF (PRESENT($arg.name)) THEN
        #for $var in $arg.usedVariables
          $ftgWrite($var)#end for 
      END IF
    #end if 
  #end for
  
  #if $subroutine.isFunction
    ! RESULT
    #for $var in $result.usedVariables
      $ftgWrite($var)#end for
  #end if
  
  ! GLOBALS
  #for $var in $globals.usedVariables
    $ftgWrite($var)#end for
  
  CALL ftg_${subroutine.name}_close_serializer()
  
  CALL MPI_BARRIER (MPI_COMM_WORLD, error)
  STOP 'FTG STOP'

END SUBROUTINE ftg_${subroutine.name}_capture_output
  
$epilogue