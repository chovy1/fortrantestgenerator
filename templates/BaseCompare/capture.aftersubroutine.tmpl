$prologue

LOGICAL FUNCTION ftg_${subroutine.name}_capture_active()

  ftg_${subroutine.name}_capture_active = &
    ftg_${subroutine.name}_round == ftg_${subroutine.name}_capture_round

END FUNCTION ftg_${subroutine.name}_capture_active

SUBROUTINE ftg_${subroutine.name}_init_serializer(stage)

    CHARACTER(*), PARAMETER :: DATA_DIR = '$dataDir/ftg_${subroutine.name}_test/'
    CHARACTER(*), INTENT(IN) :: stage
    CHARACTER(len=256) :: basename
    CHARACTER(len=1024) :: dir
    INTEGER(kind=4) rank, error

    CALL MPI_COMM_RANK(MPI_COMM_WORLD, rank, error)
    WRITE (basename,'(A,A,A,I0.2)') 'ftg_${subroutine.name}_', TRIM(stage), '_', rank
    WRITE (dir,'(A,A)') TRIM(DATA_DIR), TRIM(stage)
    
    CALL ftg_set_serializer(TRIM(dir), TRIM(basename), 'w')
    CALL ftg_set_savepoint(TRIM(stage))

  END SUBROUTINE ftg_${subroutine.name}_init_serializer

  SUBROUTINE ftg_${subroutine.name}_close_serializer(stage)

    CHARACTER(*), INTENT(IN) :: stage
    INTEGER(kind=4) error

    CALL ftg_destroy_savepoint()
    CALL ftg_destroy_serializer()
    
    IF (stage == 'output') THEN
      CALL MPI_BARRIER (MPI_COMM_WORLD, error)
      STOP 'FTG STOP'
    END IF

  END SUBROUTINE ftg_${subroutine.name}_close_serializer

SUBROUTINE ftg_${subroutine.name}_capture_data($commaList('stage', $args, $result))

  $globals.imports
  $types.imports

  CHARACTER(*), INTENT(IN) :: stage
  $args.specs(intent = 'in', allocatable = False)
  #if $subroutine.isFunction:
    $result.spec(intent = 'in', allocatable = False, optional = True)
  #end if

  INTEGER :: ftg_d1, ftg_d2, ftg_d3, ftg_d4, ftg_d5, ftg_d6
  CHARACTER(len=256) :: ftg_name

  CALL ftg_${subroutine.name}_init_serializer(stage)

  $resetRegistrations
  IF (stage == 'input') THEN
    ! REQUIRED IN ARGUMENTS
    #for $var in $args.intentIn.requireds.usedVariables
      $ftgWrite($var) $clearLine
    #end for
  
    ! OPTIONAL IN ARGUMENTS
    #for $var in $args.intentIn.optionals.usedVariables
      IF (PRESENT($var.container(0))) THEN $mergeBegin('present')
        $ftgWrite($var) $clearLine
      END IF $mergeEnd('present')
    #end for
  END IF

  ! REQUIRED OUT + INOUT ARGUMENTS
  #for $var in $args.allOut.requireds.usedVariables
    $ftgWrite($var) $clearLine
  #end for

  ! OPTIONAL OUT + INOUT ARGUMENTS
  #for $var in $args.allOut.optionals.usedVariables
    IF (PRESENT($var.container(0))) THEN $mergeBegin('present')
      $ftgWrite($var) $clearLine
    END IF $mergeEnd('present')
  #end for
  
  #if $subroutine.isFunction
    IF (stage == 'output' .AND. PRESENT($result)) THEN
      ! FUNCTION RESULT
      #for $var in $result.usedVariables
        $ftgWrite($var) $clearLine
      #end for
    END IF
  #end if
  
  ! GLOBALS
  #for $var in $globals.usedVariables
    $ftgWrite($var) $clearLine 
  #end for

  CALL ftg_${subroutine.name}_close_serializer(stage)

END SUBROUTINE ftg_${subroutine.name}_capture_data
  
$epilogue