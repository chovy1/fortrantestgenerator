PROGRAM ftg_${subroutine.name}_test

  USE mpi
  USE m_ser_ftg, ONLY: ftg_set_serializer, ftg_set_savepoint, ftg_destroy_serializer, ftg_destroy_savepoint, ftg_print_serializer_debuginfo, ftg_field_exists, ftg_get_bounds, ftg_read, ftg_allocate_and_read_pointer, ftg_allocate_and_read_allocatable
  USE m_ser_ftg_cmp, ONLY: ftg_compare
  USE $module.name, ONLY: $subroutine.name
  
  $globals.imports
  $types.imports
  
IMPLICIT NONE

INTEGER (kind=4) :: rank, error, failure_count
$args.specs(intent = '', allocatable = True)
#if $subroutine.isFunction
  $result.spec(name = $subroutine.name + '_result', intent = '', \
               allocatable = False, pointer = False)
#end if

CALL MPI_INIT(error)
CALL MPI_COMM_RANK(MPI_COMM_WORLD, rank, error)

CALL ftg_${subroutine.name}_replay_input($commaList($args))

#if $subroutine.isFunction
  ${subroutine.name}_result = ${subroutine.name}($commaList($args))
#else
  CALL ${subroutine.name}($commaList($args))
#end if

#if $subroutine.isFunction
    #set $resultArg = $subroutine.name + '_result'
#else
  #set $resultArg = ''
#end if  

CALL ftg_${subroutine.name}_compare_output($commaList($args.allOut,  \
                                                      $resultArg, 'failure_count'))

IF (failure_count > 0) THEN
  WRITE (*,'(A,I0,A,I0,A)') 'Rank #', rank, ': *** TEST FAILED ***'
ELSE
  WRITE (*,'(A,I0,A)') 'Rank #', rank, ': *** TEST PASSED ***'
END IF
    
CALL MPI_FINALIZE(error)

CONTAINS

  SUBROUTINE ftg_${subroutine.name}_init_serializer(stage)

    CHARACTER(*), PARAMETER :: DATA_DIR = '$dataDir/ftg_${subroutine.name}_test/'
    CHARACTER(*), INTENT(IN) :: stage
    CHARACTER(len=256) :: basename
    CHARACTER(len=1024) :: dir

    WRITE (basename,'(a,a,a,i0)') 'ftg_${subroutine.name}_', TRIM(stage), '_', rank
    WRITE (dir,'(a,a)') TRIM(DATA_DIR), TRIM(stage)
    
    CALL ftg_set_serializer(TRIM(dir), TRIM(basename), 'r')
    CALL ftg_set_savepoint(TRIM(stage))

  END SUBROUTINE ftg_${subroutine.name}_init_serializer

  SUBROUTINE ftg_${subroutine.name}_close_serializer()

   CALL ftg_destroy_savepoint()
   CALL ftg_destroy_serializer()

  END SUBROUTINE ftg_${subroutine.name}_close_serializer
  
  SUBROUTINE ftg_${subroutine.name}_replay_input($commaList($args))
    
    $args.specs(intent = 'inout', allocatable = True)

    INTEGER, DIMENSION(8) :: ftg_bounds
    INTEGER :: ftg_d1, ftg_d2, ftg_d3, ftg_d4
    CHARACTER(len=256) :: ftg_c

    CALL ftg_${subroutine.name}_init_serializer('input')
  
    ! ARGUMENTS
    #for $var in $args.usedVariables
      $ftgRead($var) #end for

    ! GLOBALS
    #for $var in $globals.usedVariables
      $ftgRead($var) #end for
      
    CALL ftg_${subroutine.name}_close_serializer()

  END SUBROUTINE ftg_${subroutine.name}_replay_input
  
  SUBROUTINE ftg_${subroutine.name}_compare_output($commaList($args.allOut, $result, 'failure_count'))
    
    $args.allOut.specs(intent = 'in', allocatable = False)
    #if $subroutine.isFunction:
      $result.spec(intent = 'in', allocatable = False, pointer = False)
    #end if
    
    INTEGER, INTENT(out) :: failure_count
    LOGICAL :: result
    INTEGER :: ftg_d1, ftg_d2, ftg_d3, ftg_d4
    CHARACTER(len=256) :: ftg_c
    
    failure_count = 0
    
    CALL ftg_${subroutine.name}_init_serializer('output')
    
    ! ARGUMENTS
    #for $var in $args.allOut.usedVariables
      $ftgCompare($var) #end for
    
    #if $subroutine.isFunction
      ! RESULT
      #for $var in $result.usedVariables
        $ftgCompare($var)#end for
    #end if
    
    ! GLOBALS
    #for $var in $globals.usedVariables
      $ftgCompare($var) #end for
      
    CALL ftg_${subroutine.name}_close_serializer()
    
  END SUBROUTINE ftg_${subroutine.name}_compare_output  
  
END PROGRAM ftg_${subroutine.name}_test