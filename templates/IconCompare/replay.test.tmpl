PROGRAM ftg_${subroutine.name}_test

  USE mtime
  USE mo_kind
  USE mo_impl_constants, ONLY: MAX_CHAR_LENGTH
  USE mo_exception,      ONLY: message, finish
  USE mo_mpi,            ONLY: start_mpi, stop_mpi, get_my_mpi_all_id, get_my_mpi_all_comm_size, work_mpi_barrier, p_recv, p_send, p_bcast !ICON

  USE ${module.name}, ONLY: ${subroutine.name}
  ! Remove if capture code already deleted
  USE ${module.name}, ONLY: ftg_${subroutine.name}_capture_input_enabled, ftg_${subroutine.name}_capture_output_enabled

  USE m_ser_ftg, ONLY: ftg_set_serializer, ftg_set_savepoint, ftg_destroy_serializer, ftg_destroy_savepoint, ftg_print_serializer_debuginfo, ftg_field_exists, ftg_get_bounds, ftg_read, ftg_allocate_and_read_pointer, ftg_allocate_and_read_allocatable
  USE m_ser_ftg_cmp, ONLY: ftg_compare, ftg_cmp_message_prefix, ftg_cmp_print_when_equal, ftg_cmp_count_missing_field_as_failure
  
  ${globals.imports}
  
  ${types.imports}
  
IMPLICIT NONE

CHARACTER(*), PARAMETER :: INPUT_DIR = '${dataDir}/ftg_${subroutine.name}_test/input'
CHARACTER(*), PARAMETER :: OUTPUT_DIR = '${dataDir}/ftg_${subroutine.name}_test/output'
LOGICAL, PARAMETER :: SERIALBOX_DEBUG = .FALSE.


INTEGER :: failure_count
CHARACTER(9) :: failure_count_char

CALL start_mpi('ftg_${subroutine.name}_test') !ICON

CALL ftg_test_${subroutine.name}(failure_count)

IF (get_my_mpi_all_id() == 0) THEN
    IF (failure_count > 0) THEN
        !TODO Print total number of failures
        WRITE (failure_count_char,'(I0)') failure_count
        CALL finish('FTG', '${subroutine.name}: TEST FAILED, total number of failures: '//TRIM(failure_count_char), 2)
    ELSE
        CALL message('FTG', '${subroutine.name}: TEST PASSED')
    END IF
END IF
 
CALL stop_mpi() !ICON

CONTAINS
  
  SUBROUTINE ftg_test_${subroutine.name}(total_failure_count)
  
    INTEGER, INTENT(out) :: total_failure_count
      
    ${args.specs(intent = '', allocatable = True, charLengthZero = True)}
    
    INTEGER :: mpi_all_id, failure_count
    
    mpi_all_id = get_my_mpi_all_id()
    failure_count = 0
  
    CALL message('FTG', '*** Run test for ${subroutine.name} ***')

    ! Remove if capture code already deleted
    ftg_${subroutine.name}_capture_input_enabled = .FALSE. 
    ftg_${subroutine.name}_capture_output_enabled = .FALSE.
    
    WRITE (ftg_cmp_message_prefix,'(a,i0,a)') 'FTG ${subroutine.name} (', mpi_all_id, ') * '
    ftg_cmp_print_when_equal = .TRUE.
    ftg_cmp_count_missing_field_as_failure = .FALSE.

    CALL ftg_${subroutine.name}_init_for_replay('input', INPUT_DIR)
    CALL ftg_${subroutine.name}_replay_input(${args.joinNames})
    CALL ftg_destroy_serializer()

    CALL ${subroutine.name}(${args.joinNames})

    ! One process after another to get nice, ordered printing
    ! Change this if to slow
    IF (mpi_all_id > 0) THEN
        CALL p_recv(total_failure_count, mpi_all_id - 1, 0)
    ELSE
        total_failure_count = 0
    END IF

    CALL ftg_${subroutine.name}_init_for_replay('output', OUTPUT_DIR)    
    CALL ftg_${subroutine.name}_compare_output(${args.allOut.joinNames}, failure_count)
    CALL ftg_destroy_serializer()
    
    IF (failure_count == 0) THEN
        WRITE (*,'(a,i0,a)') 'FTG ${subroutine.name} (', mpi_all_id, ') *** TEST PASSED'
    ELSE
        WRITE (*,'(a,i0,a,i0)') 'FTG ${subroutine.name} (', mpi_all_id, ') *** FAILURE: ', failure_count
    END IF
    
    total_failure_count = total_failure_count + failure_count 

    IF (mpi_all_id < get_my_mpi_all_comm_size() - 1) THEN
        CALL p_send(total_failure_count, mpi_all_id + 1, 0)
    ELSE
        CALL p_send(total_failure_count, 0, 0)
    END IF
    
    CALL p_bcast(total_failure_count, get_my_mpi_all_comm_size() - 1)

  END SUBROUTINE ftg_test_${subroutine.name}

  
  SUBROUTINE ftg_${subroutine.name}_init_for_replay(stage, dir)

    CHARACTER(*), INTENT(IN) :: stage, dir

    CHARACTER(len=MAX_CHAR_LENGTH) :: basename

    WRITE (basename,'(a,a,a,i0)') 'ftg_${subroutine.name}_', TRIM(stage), '_', get_my_mpi_all_id()

    WRITE (0,'(A)') 'FTG INIT ${subroutine.name} '//TRIM(basename)
    CALL ftg_set_serializer(TRIM(dir), TRIM(basename), 'r')
    IF (SERIALBOX_DEBUG) THEN
      CALL ftg_print_serializer_debuginfo()
    END IF

  END SUBROUTINE ftg_${subroutine.name}_init_for_replay
  
  SUBROUTINE ftg_${subroutine.name}_replay_input(${args.joinNames})
    
    ${args.specs(intent = 'inout', allocatable = True)}

    INTEGER, DIMENSION(8) :: ftg_bounds
    INTEGER :: ftg_d1, ftg_d2, ftg_d3, ftg_d4
    CHARACTER(len=256) :: ftg_c
    INTEGER ftg_mtime_calendar

    CALL ftg_set_savepoint('input')
  
    WRITE (0,'(a,i0,a)') 'FTG READ INPUT DATA ${subroutine.name} (', get_my_mpi_all_id(), ')'
    
    ! MTIME CALENDAR TYPE --> Remove these lines if mtime is not used
    CALL ftg_read("ftg_mtime_calendar", ftg_mtime_calendar)
    CALL setCalendar(ftg_mtime_calendar)

    ! ARGUMENTS
    #for $var in $args.usedVariables
      $ftgRead($var) #end for

    ! GLOBALS
    #for $var in $globals.usedVariables
      $ftgRead($var) #end for

    CALL ftg_destroy_savepoint()

  END SUBROUTINE ftg_${subroutine.name}_replay_input
  
  SUBROUTINE ftg_${subroutine.name}_compare_output(${args.allOut.joinNames}, failure_count)
    
    ${args.allOut.specs(intent = 'in')}
    
    INTEGER, INTENT(inout) :: failure_count
    LOGICAL :: result
    INTEGER :: ftg_d1, ftg_d2, ftg_d3, ftg_d4
    CHARACTER(len=256) :: ftg_c
    
    CALL ftg_set_savepoint('output')
  
    WRITE (0,'(a,i0,a)') 'FTG COMPARE OUTPUT DATA ${subroutine.name} (', get_my_mpi_all_id(), ')'
    
    ! ARGUMENTS
    #for $var in $args.allOut.usedVariables
      $ftgCompare($var) #end for

    ! GLOBALS
    #for $var in $globals.usedVariables
      $ftgCompare($var) #end for

    CALL ftg_destroy_savepoint()
    
  END SUBROUTINE ftg_${subroutine.name}_compare_output
  
END PROGRAM ftg_${subroutine.name}_test