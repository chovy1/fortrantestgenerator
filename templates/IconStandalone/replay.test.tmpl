PROGRAM ftg_${subroutine.name}_test

  USE mtime
  USE mo_kind
  USE mo_impl_constants, ONLY: MAX_CHAR_LENGTH
  USE mo_exception,      ONLY: message
  USE mo_mpi,            ONLY: get_my_mpi_all_id, start_mpi, stop_mpi !ICON

  USE ${module.name}, ONLY: ${subroutine.name}, ftg_${subroutine.name}_capture_input_enabled, ftg_${subroutine.name}_capture_output_enabled, ftg_${subroutine.name}_capture_round, ftg_${subroutine.name}_output_dir

  USE m_ser_ftg, ONLY: ftg_set_serializer, ftg_set_savepoint, ftg_destroy_serializer, ftg_destroy_savepoint, ftg_print_serializer_debuginfo, ftg_field_exists, ftg_get_bounds, ftg_read, ftg_allocate_and_read_pointer, ftg_allocate_and_read_allocatable
  
  ${globals.imports}
  
  ${types.imports}
  
IMPLICIT NONE

CHARACTER(*), PARAMETER :: INPUT_DIR = '${dataDir}/ftg_${subroutine.name}_test/input'
CHARACTER(*), PARAMETER :: OUTPUT_DIR = '${dataDir}/ftg_${subroutine.name}_test/output_test'
LOGICAL, PARAMETER :: OUTPUT_ENABLED = .TRUE.
LOGICAL, PARAMETER :: SERIALBOX_DEBUG = .FALSE.

CALL start_mpi('ftg_${subroutine.name}_test') !ICON

CALL ftg_test_${subroutine.name}()

CALL stop_mpi() !ICON

CONTAINS
  
  SUBROUTINE ftg_test_${subroutine.name}()

    ${args.specs(intent = '', allocatable = True, charLengthZero = True)}
    #if $subroutine.isFunction
        ${subroutine.result.spec(name = $subroutine.name + '_result', intent = '', allocatable = False)}
    #end if
  
    CALL message('FTG', '*** Run test for ${subroutine.name} ***')
    
    ftg_${subroutine.name}_capture_input_enabled = .FALSE.
    ftg_${subroutine.name}_capture_output_enabled = OUTPUT_ENABLED
    ftg_${subroutine.name}_output_dir = OUTPUT_DIR
    ftg_${subroutine.name}_capture_round = 1

    CALL ftg_${subroutine.name}_init_for_replay('input')
    CALL ftg_${subroutine.name}_replay_input(${args.joinNames})
    CALL ftg_destroy_serializer()

    #if $subroutine.isFunction
        ${subroutine.name}_result = ${subroutine.name}(${args.joinNames})
    #else
        CALL ${subroutine.name}(${args.joinNames})
    #end if

  END SUBROUTINE ftg_test_${subroutine.name}

  
  SUBROUTINE ftg_${subroutine.name}_init_for_replay(stage)

    CHARACTER(*), INTENT(IN) :: stage

    CHARACTER(len=MAX_CHAR_LENGTH) :: basename

    WRITE (basename,'(a,a,a,i1)') 'ftg_${subroutine.name}_', TRIM(stage), '_', get_my_mpi_all_id()

    WRITE (0,*) 'FTG INIT ${subroutine.name} '//TRIM(basename)
    CALL ftg_set_serializer(TRIM(INPUT_DIR), TRIM(basename), 'r')
    IF (SERIALBOX_DEBUG) THEN
      CALL ftg_print_serializer_debuginfo()
    END IF

  END SUBROUTINE ftg_${subroutine.name}_init_for_replay
  
  SUBROUTINE ftg_${subroutine.name}_replay_input(${args.joinNames})
    
    ${args.specs(intent = 'inout', allocatable = True)}

    INTEGER, DIMENSION(8) :: ftg_bounds
    INTEGER :: ftg_d1, ftg_d2, ftg_d3, ftg_d4
    CHARACTER(len=256) :: ftg_c
    INTEGER ftg_mtime_calendar

    CALL ftg_set_savepoint('input')
  
    WRITE (0,'(a,i1,a)') 'FTG READ INPUT DATA ${subroutine.name} (', get_my_mpi_all_id(), ')'
    
    ! MTIME CALENDAR TYPE --> Remove these lines if mtime is not used
    CALL ftg_read("ftg_mtime_calendar", ftg_mtime_calendar)
    CALL setCalendar(ftg_mtime_calendar)

    ! ARGUMENTS
    #for $var in $args.usedVariables
      $ftgRead($var) #end for

    ! GLOBALS
    #for $var in $globals.usedVariables
      $ftgRead($var) #end for

    CALL ftg_destroy_savepoint()

  END SUBROUTINE ftg_${subroutine.name}_replay_input
  
END PROGRAM ftg_${subroutine.name}_test