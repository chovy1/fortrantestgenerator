$prologue $mergeBegin('ftg')
$mergeBegin('ftg')
LOGICAL FUNCTION ftg_${subroutine.name}_capture_active()

  ftg_${subroutine.name}_capture_active = &
    ftg_${subroutine.name}_round == ftg_${subroutine.name}_capture_round

END FUNCTION ftg_${subroutine.name}_capture_active

SUBROUTINE ftg_${subroutine.name}_init_serializer(stage)

  USE mpi
  USE m_ser_ftg, ONLY: ftg_set_serializer, ftg_add_serializer_metainfo, ftg_set_savepoint, ftg_add_savepoint_metainfo, ignore_bullshit_max_dim_size, ignore_bullshit_allow_negative_indices

  CHARACTER(*), INTENT(IN) :: stage

  INTEGER(kind=4) mpi_rank, mpi_err
  CHARACTER(len=1024) :: basename, dir, mkdir_err
  
  CALL MPI_COMM_RANK(MPI_COMM_WORLD, mpi_rank, mpi_err)

  WRITE (basename,'(A,A,A,I0.2)') 'ftg_${subroutine.name}_', TRIM(stage), '_', mpi_rank
  WRITE (dir,'(A,A)') TRIM(ftg_${subroutine.name}_data_dir), TRIM(stage)
  WRITE (0,'(A,A,A,I0.2,A,I0,A)') 'FTG WRITE STARTED ${subroutine.name}: ', TRIM(stage), ' (Rank #', mpi_rank, ', round: ', ftg_${subroutine.name}_round, ')'

  mkdir_err = ''
  CALL EXECUTE_COMMAND_LINE('mkdir -p '//TRIM(dir), cmdmsg=mkdir_err)
  IF (TRIM(mkdir_err) /= '') THEN
    WRITE (0,'(A,A,A)') 'FTG INIT *** ERROR: ', TRIM(mkdir_err), ' ***'
  END IF 
  
  ignore_bullshit_allow_negative_indices = .TRUE.
  
  CALL ftg_set_serializer(TRIM(dir), TRIM(basename), 'w')
  CALL ftg_add_serializer_metainfo('subroutine', '${subroutine.name}')
  CALL ftg_add_serializer_metainfo('stage', stage)
  CALL ftg_add_serializer_metainfo('mpi_rank', mpi_rank)
  
  CALL ftg_set_savepoint(TRIM(stage))

END SUBROUTINE ftg_${subroutine.name}_init_serializer

SUBROUTINE ftg_${subroutine.name}_close_serializer(stage)

  USE mpi
  USE m_ser_ftg, ONLY: ftg_destroy_savepoint, ftg_destroy_serializer

  CHARACTER(*), INTENT(IN) :: stage

  INTEGER(kind=4) mpi_rank, mpi_err
  
  CALL MPI_COMM_RANK(MPI_COMM_WORLD, mpi_rank, mpi_err)
  
  WRITE (0,'(A,A,A,I0.2,A)') 'FTG WRITE FINISHED ${subroutine.name}: ', TRIM(stage), ' (Rank #', mpi_rank, ')'

  CALL ftg_destroy_savepoint()
  CALL ftg_destroy_serializer()
  
  IF (stage == 'output') THEN
    CALL MPI_BARRIER (MPI_COMM_WORLD, mpi_err)
    STOP '*** FTG STOP ***'
  END IF

END SUBROUTINE ftg_${subroutine.name}_close_serializer

SUBROUTINE ftg_${subroutine.name}_capture_data($commaList('stage', $args, $result))

  USE m_ser_ftg, ONLY: ftg_write, ftg_register_only
  
  $globals.imports
  $types.imports

  CHARACTER(*), INTENT(IN) :: stage
  $args.specs(intent = 'in', allocatable = False)
  #if $subroutine.isFunction:
    $result.spec(intent = 'in', allocatable = False, optional = True)
  #end if

  INTEGER :: ftg_d1, ftg_d2, ftg_d3, ftg_d4, ftg_d5, ftg_d6
  CHARACTER(len=256) :: ftg_name
  INTEGER, DIMENSION(5) :: ftg_shape

  CALL ftg_${subroutine.name}_init_serializer(stage)

  $resetRegistrations
  IF (stage == 'input') THEN
    ! REQUIRED IN ARGUMENTS
    #for $var in $args.intentIn.requireds.usedVariables
      $ftgWrite($var) $clearLine
    #end for
  
    ! OPTIONAL IN ARGUMENTS
    #for $var in $args.intentIn.optionals.usedVariables
      IF (PRESENT($var.container(0))) THEN $mergeBegin('present')
        $ftgWrite($var) $clearLine
      END IF $mergeEnd('present')
    #end for
  END IF

  ! REQUIRED OUT + INOUT ARGUMENTS
  #for $var in $args.allOut.requireds.usedVariables
    $ftgWrite($var) $clearLine
  #end for

  ! OPTIONAL OUT + INOUT ARGUMENTS
  #for $var in $args.allOut.optionals.usedVariables
    IF (PRESENT($var.container(0))) THEN $mergeBegin('present')
      $ftgWrite($var) $clearLine
    END IF $mergeEnd('present')
  #end for
  
  #if $subroutine.isFunction
    IF (stage == 'output' .AND. PRESENT($result)) THEN
      ! FUNCTION RESULT
      #for $var in $result.usedVariables
        $ftgWrite($var) $clearLine
      #end for
    END IF
  #end if
  
  ! GLOBALS
  #for $var in $globals.usedVariables
    $ftgWrite($var) $clearLine 
  #end for

  CALL ftg_write("ftg_${subroutine.name}_round", ftg_${subroutine.name}_round)

  CALL ftg_${subroutine.name}_close_serializer(stage)

END SUBROUTINE ftg_${subroutine.name}_capture_data
  
$epilogue $mergeEnd('ftg')