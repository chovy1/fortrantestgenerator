PROGRAM ftg_${subroutine.name}_test

  USE mpi

  USE ${module.name}, ONLY: ${subroutine.name}
  ! Remove if capture code already deleted
  USE ${module.name}, ONLY: ftg_${subroutine.name}_capture_input_enabled, ftg_${subroutine.name}_capture_output_enabled

  USE m_ser_ftg, ONLY: ftg_set_serializer, ftg_set_savepoint, ftg_destroy_serializer, ftg_destroy_savepoint, ftg_print_serializer_debuginfo, ftg_field_exists, ftg_get_bounds, ftg_read, ftg_allocate_and_read_pointer, ftg_allocate_and_read_allocatable
  USE m_ser_ftg_cmp, ONLY: ftg_compare, ftg_cmp_message_prefix, ftg_cmp_print_when_equal, ftg_cmp_count_missing_field_as_failure
  
  $globals.imports
  
  $types.imports
  
IMPLICIT NONE

INTEGER, PARAMETER :: MAX_CHAR_LENGTH = 1024
CHARACTER(*), PARAMETER :: INPUT_DIR = '${dataDir}/ftg_${subroutine.name}_test/input'
CHARACTER(*), PARAMETER :: OUTPUT_DIR = '${dataDir}/ftg_${subroutine.name}_test/output'
LOGICAL, PARAMETER :: SERIALBOX_DEBUG = .FALSE.

INTEGER (kind=4) :: mpi_rank, mpi_size, mpi_err
INTEGER :: total_failure_count
CHARACTER(9) :: total_failure_count_char

CALL MPI_INIT(mpi_err)

CALL MPI_COMM_RANK(MPI_COMM_WORLD, mpi_rank, mpi_err)
CALL MPI_COMM_SIZE(MPI_COMM_WORLD, mpi_size, mpi_err)

CALL ftg_test_${subroutine.name}(total_failure_count)

IF (mpi_rank == 0) THEN
    IF (total_failure_count > 0) THEN
        WRITE(*,'(A,I0,A)') '*** FTG: ${subroutine.name}: TEST FAILED, total number of failures: ', total_failure_count_char, ' ***'
        STOP 2
    ELSE
        WRITE(*,*) '*** FTG: ${subroutine.name}: TEST PASSED  ***'
    END IF
END IF

CALL MPI_FINALIZE(mpi_err)

CONTAINS
  
  SUBROUTINE ftg_test_${subroutine.name}(total_failure_count)
  
    INTEGER, INTENT(out) :: total_failure_count
      
    ${args.specs(intent = '', allocatable = True, charLengthZero = True)}
    #if $subroutine.isFunction
        ${result.spec(name = $subroutine.name + '_result', intent = '', allocatable = False)}
    #end if
    
    INTEGER :: failure_count, mpi_stat(MPI_STATUS_SIZE)
    
    failure_count = 0
  
    IF (mpi_rank == 0) THEN
      WRITE(*,*) '*** FTG: Run test for ${subroutine.name} ***'
    END IF
    
    ! Remove if capture code already deleted
    ftg_${subroutine.name}_capture_input_enabled = .FALSE. 
    ftg_${subroutine.name}_capture_output_enabled = .FALSE.
    
    WRITE (ftg_cmp_message_prefix,'(A,I0.2,A)') 'FTG ${subroutine.name} (', mpi_rank, ') * '
    ftg_cmp_print_when_equal = .TRUE.
    ftg_cmp_count_missing_field_as_failure = .FALSE.

    ! ----------- REPLAY -----------
    CALL ftg_${subroutine.name}_init_for_replay('input', INPUT_DIR)
    CALL ftg_${subroutine.name}_replay_input($commaList($args))
    CALL ftg_destroy_serializer()

    #if $subroutine.isFunction
      #if $result.pointer
        ${subroutine.name}_result => ${subroutine.name}($commaList($args))
      #else
        ${subroutine.name}_result = ${subroutine.name}($commaList($args))
      #end if
    #else
      CALL ${subroutine.name}($commaList($args))
    #end if

    ! ----------- COMPARE -----------
    ! One process after another to get nice, ordered printing
    ! Change this if to slow
    IF (mpi_rank > 0) THEN
        CALL mpi_recv(total_failure_count, 1, MPI_INT, mpi_rank - 1, 0, MPI_COMM_WORLD, mpi_stat, mpi_err)
    ELSE
        total_failure_count = 0
    END IF

    CALL ftg_${subroutine.name}_init_for_replay('output', OUTPUT_DIR)    
    #if $subroutine.isFunction
        #set $resultArg = $subroutine.name + '_result'
    #else
      #set $resultArg = ''
    #end if  
    CALL ftg_${subroutine.name}_compare_output($commaList($args.allOut, $resultArg, 'failure_count'))
    CALL ftg_destroy_serializer()
    
    IF (failure_count == 0) THEN
        WRITE (*,'(A,I0.2,A)') 'FTG ${subroutine.name} (', mpi_rank, ') *** TEST PASSED ***'
    ELSE
        WRITE (*,'(A,I0.2,A,I0,A)') 'FTG ${subroutine.name} (', mpi_rank, ') *** FAILURE: ', failure_count, ' ***'
    END IF
    
    total_failure_count = total_failure_count + failure_count 

    IF (mpi_rank < mpi_size - 1) THEN
        CALL mpi_send(total_failure_count, 1, MPI_INT, mpi_rank + 1, 0, MPI_COMM_WORLD, mpi_err)
    END IF

    CALL mpi_bcast(total_failure_count, 1, MPI_INT, mpi_size - 1, MPI_COMM_WORLD, mpi_err)

  END SUBROUTINE ftg_test_${subroutine.name}

  
  SUBROUTINE ftg_${subroutine.name}_init_for_replay(stage, dir)

    CHARACTER(*), INTENT(IN) :: stage, dir

    CHARACTER(len=MAX_CHAR_LENGTH) :: basename

    WRITE (basename,'(A,A,A,I0.2)') 'ftg_${subroutine.name}_', TRIM(stage), '_', mpi_rank

    WRITE (0,'(A)') 'FTG INIT ${subroutine.name} '//TRIM(basename)
    CALL ftg_set_serializer(TRIM(dir), TRIM(basename), 'r')
    IF (SERIALBOX_DEBUG) THEN
      CALL ftg_print_serializer_debuginfo()
    END IF

  END SUBROUTINE ftg_${subroutine.name}_init_for_replay
  
  SUBROUTINE ftg_${subroutine.name}_replay_input($commaList($args))
    
    ${args.specs(intent = 'inout', allocatable = True)}

    INTEGER, DIMENSION(8) :: ftg_bounds
    INTEGER :: ftg_d1, ftg_d2, ftg_d3, ftg_d4
    CHARACTER(len=256) :: ftg_name

    CALL ftg_set_savepoint('input')
  
    WRITE (0,'(A,I0.2,A)') 'FTG READ INPUT DATA ${subroutine.name} (', mpi_rank, ')'

    ! ARGUMENTS
    #for $var in $args.usedVariables
      $ftgRead($var) $clearLine
    #end for

    ! GLOBALS
    #for $var in $globals.usedVariables
      $ftgRead($var) $clearLine
    #end for

    CALL ftg_destroy_savepoint()

  END SUBROUTINE ftg_${subroutine.name}_replay_input
  
  SUBROUTINE ftg_${subroutine.name}_compare_output($commaList($args.allOut, $result, 'failure_count'))
    
    ${args.allOut.specs(intent = 'in', allocatable = False)}
    #if $subroutine.isFunction:
      ${result.spec(intent = 'in', allocatable = False)}
    #end if
    
    INTEGER, INTENT(inout) :: failure_count
    LOGICAL :: result
    INTEGER :: ftg_d1, ftg_d2, ftg_d3, ftg_d4
    CHARACTER(len=256) :: ftg_name
    
    CALL ftg_set_savepoint('output')
  
    WRITE (0,'(A,I0.2,A)') 'FTG COMPARE OUTPUT DATA ${subroutine.name} (', mpi_rank, ')'
    
    ! ARGUMENTS
    #for $var in $args.allOut.usedVariables
      $ftgCompare($var) $clearLine
    #end for
    
    #if $subroutine.isFunction
      ! RESULT
      #for $var in $result.usedVariables
        $ftgCompare($var) $clearLine
      #end for
    #end if
    
    ! GLOBALS
    #for $var in $globals.usedVariables
      $ftgCompare($var) $clearLine
    #end for

    CALL ftg_destroy_savepoint()
    
  END SUBROUTINE ftg_${subroutine.name}_compare_output
  
END PROGRAM ftg_${subroutine.name}_test