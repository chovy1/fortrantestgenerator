PROGRAM ftg_${subroutine.name}_test

USE ${module.name}, ONLY: ${subroutine.name}
! Remove if capture code already deleted
USE ${module.name}, ONLY: ftg_${subroutine.name}_capture_input_enabled, ftg_${subroutine.name}_capture_output_enabled

USE m_ser_ftg, ONLY: ftg_set_serializer, ftg_set_savepoint, ftg_destroy_serializer, ftg_destroy_savepoint, ftg_print_serializer_debuginfo, ftg_field_exists, ftg_get_bounds, ftg_read, ftg_allocate_and_read_pointer, ftg_allocate_and_read_allocatable
USE m_ser_ftg_cmp, ONLY: ftg_compare, ftg_cmp_message_prefix, ftg_cmp_print_when_equal, ftg_cmp_count_missing_field_as_failure

$globals.imports
$types.imports
  
IMPLICIT NONE

CHARACTER(*), PARAMETER :: INPUT_DIR = '${dataDir}/ftg_${subroutine.name}_test/input'
CHARACTER(*), PARAMETER :: OUTPUT_DIR = '${dataDir}/ftg_${subroutine.name}_test/output'

INTEGER :: failure_count

! Remove if capture code already deleted
ftg_${subroutine.name}_capture_input_enabled = .FALSE. 
ftg_${subroutine.name}_capture_output_enabled = .FALSE.

ftg_cmp_message_prefix = 'FTG ${subroutine.name} * '
ftg_cmp_print_when_equal = .TRUE.
ftg_cmp_count_missing_field_as_failure = .FALSE.

WRITE(*,'(A)') '*** FTG: Run test for ${subroutine.name} ***'
  
CALL ftg_test_${subroutine.name}(failure_count)

IF (failure_count > 0) THEN
  WRITE(*,'(A,I0,A)') '*** FTG: ${subroutine.name}: TEST FAILED, total number of failures: ', failure_count, ' ***'
  STOP 2
ELSE
  WRITE(*,'(A)') '*** FTG: ${subroutine.name}: TEST PASSED  ***'
END IF

CONTAINS
  
SUBROUTINE ftg_test_${subroutine.name}(failure_count)

  INTEGER, INTENT(out) :: failure_count
    
  $args.specs(intent = '', allocatable = True, charLengthZero = True)
  #if $subroutine.isFunction
      $result.spec(name = $subroutine.name + '_result', intent = '', allocatable = False)
  #end if
  
  ! ----------- REPLAY -----------
  CALL ftg_${subroutine.name}_replay_input($commaList($args))

  #if $subroutine.isFunction
    #if $result.pointer
      ${subroutine.name}_result => ${subroutine.name}($commaList($args))
    #else
      ${subroutine.name}_result = ${subroutine.name}($commaList($args))
    #end if
  #else
    CALL ${subroutine.name}($commaList($args))
  #end if

  ! ----------- COMPARE -----------
  #if $subroutine.isFunction
      #set $resultArg = $subroutine.name + '_result'
  #else
    #set $resultArg = ''
  #end if  
  CALL ftg_${subroutine.name}_compare_output($commaList($args.allOut, $resultArg, 'failure_count'))
  
END SUBROUTINE ftg_test_${subroutine.name}

SUBROUTINE ftg_${subroutine.name}_init_serializer(stage, dir)

  CHARACTER(*), INTENT(IN) :: stage, dir

  CHARACTER(len=1024) :: basename

  basename = 'ftg_${subroutine.name}_'//TRIM(stage)
  
  CALL ftg_set_serializer(TRIM(dir), TRIM(basename), 'r')
  CALL ftg_set_savepoint(stage)

END SUBROUTINE ftg_${subroutine.name}_init_serializer

SUBROUTINE ftg_${subroutine.name}_close_serializer()

  CALL ftg_destroy_savepoint()
  CALL ftg_destroy_serializer()

END SUBROUTINE ftg_${subroutine.name}_close_serializer

SUBROUTINE ftg_${subroutine.name}_replay_input($commaList($args))
  
  $args.specs(intent = 'inout', allocatable = True)

  INTEGER, DIMENSION(8) :: ftg_bounds
  INTEGER :: ftg_d1, ftg_d2, ftg_d3, ftg_d4, ftg_d5, ftg_d6
  CHARACTER(len=256) :: ftg_name

  WRITE (0,'(A)') 'FTG READ INPUT STARTED ${subroutine.name}'
  CALL ftg_${subroutine.name}_init_serializer('input', INPUT_DIR)

  ! ARGUMENTS
  #for $var in $args.usedVariables
    $ftgRead($var) $clearLine
  #end for

  ! GLOBALS
  #for $var in $globals.usedVariables
    $ftgRead($var) $clearLine
  #end for

  CALL ftg_${subroutine.name}_close_serializer()
  WRITE (0,'(A)') 'FTG READ INPUT FINISHED ${subroutine.name}'

END SUBROUTINE ftg_${subroutine.name}_replay_input

SUBROUTINE ftg_${subroutine.name}_compare_output($commaList($args.allOut, $result, 'failure_count'))
  
  $args.allOut.specs(intent = 'in', allocatable = False)
  #if $subroutine.isFunction:
    $result.spec(intent = 'in', allocatable = False)
  #end if
  
  INTEGER, INTENT(out) :: failure_count
  LOGICAL :: result
  INTEGER :: ftg_d1, ftg_d2, ftg_d3, ftg_d4, ftg_d5, ftg_d6
  CHARACTER(len=256) :: ftg_name
  
  WRITE (0,'(A)') 'FTG COMPARE OUTPUT DATA ${subroutine.name}'
  CALL ftg_${subroutine.name}_init_serializer('output', OUTPUT_DIR)
  
  failure_count = 0
  
  ! ARGUMENTS
  #for $var in $args.allOut.usedVariables
    $ftgCompare($var) $clearLine
  #end for
  
  #if $subroutine.isFunction
    ! RESULT
    #for $var in $result.usedVariables
      $ftgCompare($var) $clearLine
    #end for
  #end if
  
  ! GLOBALS
  #for $var in $globals.usedVariables
    $ftgCompare($var) $clearLine
  #end for
  
  CALL ftg_${subroutine.name}_close_serializer()
  
END SUBROUTINE ftg_${subroutine.name}_compare_output

END PROGRAM ftg_${subroutine.name}_test