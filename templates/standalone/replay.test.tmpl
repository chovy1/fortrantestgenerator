PROGRAM ftg_${subroutine.name}_test

  USE mpi

  USE ${module.name}, ONLY: ${subroutine.name}, ftg_${subroutine.name}_capture_input_enabled, ftg_${subroutine.name}_capture_output_enabled, ftg_${subroutine.name}_capture_round, ftg_${subroutine.name}_output_dir

  USE m_ser_ftg, ONLY: ftg_set_serializer, ftg_set_savepoint, ftg_destroy_serializer, ftg_destroy_savepoint, ftg_print_serializer_debuginfo, ftg_field_exists, ftg_get_bounds, ftg_read, ftg_allocate_and_read
  
  ${globals.imports}
  
  ${types.imports}
  
IMPLICIT NONE

INTEGER, PARAMETER :: MAX_CHAR_LENGTH = 1024
CHARACTER(*), PARAMETER :: INPUT_DIR = '${dataDir}/ftg_${subroutine.name}_test/input'
CHARACTER(*), PARAMETER :: OUTPUT_DIR = '${dataDir}/ftg_${subroutine.name}_test/output_test'
LOGICAL, PARAMETER :: OUTPUT_ENABLED = .TRUE.
LOGICAL, PARAMETER :: SERIALBOX_DEBUG = .FALSE.

INTEGER (kind=4) :: my_mpi_id, error

CALL MPI_INIT(error)

CALL MPI_COMM_RANK(MPI_COMM_WORLD, my_mpi_id, error)

CALL ftg_test_${subroutine.name}()

CALL MPI_FINALIZE(error)

CONTAINS
  
  SUBROUTINE ftg_test_${subroutine.name}()

    ${arguments.all.specifications(allocatable = True, charLengthZero = True)}
  
    IF (my_mpi_id == 0) THEN
      WRITE(*,*) ('*** FTG: Run test for ${subroutine.name} ***')
    END IF
    
    ftg_${subroutine.name}_capture_input_enabled = .FALSE.
    ftg_${subroutine.name}_capture_output_enabled = OUTPUT_ENABLED
    ftg_${subroutine.name}_output_dir = OUTPUT_DIR
    ftg_${subroutine.name}_capture_round = 1

    CALL ftg_${subroutine.name}_init_for_replay('input')
    CALL ftg_${subroutine.name}_replay_input(${arguments.all.names})
    CALL ftg_destroy_serializer()

    CALL ${subroutine.name}(${arguments.all.names})

  END SUBROUTINE ftg_test_${subroutine.name}

  
  SUBROUTINE ftg_${subroutine.name}_init_for_replay(stage)

    CHARACTER(*), INTENT(IN) :: stage

    CHARACTER(len=MAX_CHAR_LENGTH) :: basename

    WRITE (basename,'(a,a,a,i1)') 'ftg_${subroutine.name}_', TRIM(stage), '_', my_mpi_id

    WRITE (0,*) 'FTG INIT ${subroutine.name} '//TRIM(basename)
    CALL ftg_set_serializer(TRIM(INPUT_DIR), TRIM(basename), 'r')
    IF (SERIALBOX_DEBUG) THEN
      CALL ftg_print_serializer_debuginfo()
    END IF

  END SUBROUTINE ftg_${subroutine.name}_init_for_replay
  
  SUBROUTINE ftg_${subroutine.name}_replay_input(${arguments.all.names})
    
    ${arguments.all.specifications(intent = 'inout', allocatable = True)}

    INTEGER, DIMENSION(8) :: ftg_bounds
    INTEGER :: ftg_d1, ftg_d2, ftg_d3, ftg_d4
    CHARACTER(len=256) :: ftg_c

    CALL ftg_set_savepoint('input')
  
    WRITE (0,'(a,i1,a)') 'FTG READ INPUT DATA ${subroutine.name} (', my_mpi_id, ')'

    ! BASIC ARGUMENTS
    #for $argument in $arguments.all.basic
        #if $isArray($argument)
          CALL ftg_allocate_and_read("$argument", $argument)
        #else
          CALL ftg_read("$argument", $argument)
        #end if
    #end for

    ! OPTIONAL ARGUMENTS
    #for $argument in $arguments.all.optional
      IF (PRESENT($argument)) THEN
        #if $isArray($argument)
          CALL ftg_allocate_and_read("$argument", $argument)
        #else
          CALL ftg_read("$argument", $argument)
        #end if
      END IF
    #end for

    ! TYPE MEMBERS
    #for $member in $arguments.all.usedTypeMembers
    $ftg_read($member) #end for

    ! GLOBALS
    #for $globalVar in $globals.usedVariables
    $ftg_read($globalVar) #end for

    CALL ftg_destroy_savepoint()

  END SUBROUTINE ftg_${subroutine.name}_replay_input
  
END PROGRAM ftg_${subroutine.name}_test
################################################################################
#def ftg_read($var)
  #if $dim($var) > 4 or $type($var).upper().startswith('CHARACTER'):
    ! *** WARNING: Type not supported by serialbox *** 
    !     $var 
    !     $type($var) | dimension: $dim($var)
  #else 
    #if $isReferencable($var)
      #set $d = 1
      #for $level in $levels($var)[:-1]
        #set $container = $getExpression($var, $level)
        #set $contDim = $dim($container)
        #if $needsAllocation($container)
          IF (ftg_field_exists("$container")) THEN
            ftg_bounds = ftg_get_bounds("$container")
            $alloc($container, $contDim, "ftg_bounds(1):ftg_bounds(2)", "ftg_bounds(3):ftg_bounds(4)", "ftg_bounds(5):ftg_bounds(6)", "ftg_bounds(7):ftg_bounds(8)")
          ELSE
            $alloc($container, $contDim, "0", "0", "0", "0")
          END IF
          #set $d = $d + $contDim
        #end if
      #end for
      #if $needsAllocation($var)
        CALL ftg_allocate_and_read("$var", $var)
      #else
        CALL ftg_read("$var", $var)
      #end if
    #else
    
      #set $mandDims = $getNumberOfMandatoryDimensions($var)
      #set $topContainer = $var
      #for $d in range(1, $mandDims + 1)
        #set $topContainer = $getContainer($var, $d)
        #for $level in $levels($topContainer)
          #set $container = $getExpression($topContainer, $level)
          #set $contDim = $dim($container)
          #if $needsAllocation($container)
            #set $container = $fillIndices($container, $d - 1, "ftg_d1", "ftg_d2", "ftg_d3", "ftg_d4")
            $writeVarNameWithFilledIndicesToString($container, "ftg_c", $d - 1, "ftg_d1", "ftg_d2", "ftg_d3", "ftg_d4")
            IF (ftg_field_exists(ftg_c)) THEN
              ftg_bounds = ftg_get_bounds(ftg_c)
              $alloc($container, $contDim, "ftg_bounds(1):ftg_bounds(2)", "ftg_bounds(3):ftg_bounds(4)", "ftg_bounds(5):ftg_bounds(6)", "ftg_bounds(7):ftg_bounds(8)")
            ELSE
              $alloc($container, $contDim, "0", "0", "0", "0")
            END IF
          #end if
        #end for
        DO ftg_d$d = $lbound($var, $d, "ftg_d1", "ftg_d2", "ftg_d3", "ftg_d4"), $ubound($var, $d, "ftg_d1", "ftg_d2", "ftg_d3", "ftg_d4")
      #end for
      #for $level in sorted(set($levels($var)[:-1]) - set($levels($topContainer)))
        #set $container = $getExpression($var, $level)
        #set $contDim = $dim($container)
        #if $needsAllocationFilled($container, $d, "ftg_d1", "ftg_d2", "ftg_d3", "ftg_d4")
          #set $container = $fillIndices($container, $d, "ftg_d1", "ftg_d2", "ftg_d3", "ftg_d4")
          $writeVarNameWithFilledIndicesToString($container, "ftg_c", $d, "ftg_d1", "ftg_d2", "ftg_d3", "ftg_d4")
          IF (ftg_field_exists(ftg_c)) THEN
            ftg_bounds = ftg_get_bounds(ftg_c)
            $alloc($container, $contDim, "ftg_bounds(1):ftg_bounds(2)", "ftg_bounds(3):ftg_bounds(4)", "ftg_bounds(5):ftg_bounds(6)", "ftg_bounds(7):ftg_bounds(8)")
          ELSE
            $alloc($container, $contDim, "0", "0", "0", "0")
          END IF
        #end if
      #end for
      $writeVarNameWithFilledIndicesToString($var, "ftg_c", $mandDims, "ftg_d1", "ftg_d2", "ftg_d3", "ftg_d4")
      #set $filled = $fillIndices($var, $mandDims, "ftg_d1", "ftg_d2", "ftg_d3", "ftg_d4")
      #if $isAllocatableOrPointer($var)
        CALL ftg_allocate_and_read(ftg_c, $filled)
      #else
        CALL ftg_read(ftg_c, $filled)
      #end if 
      #for $d in range(1, $getNumberOfMandatoryDimensions($var) + 1)
        END DO
      #end for
    #end if
  #end if
#end def